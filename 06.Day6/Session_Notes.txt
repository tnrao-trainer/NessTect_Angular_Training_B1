 
 RxJS library in Angular Applications
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
 -->  RxJS used to handle async calls.
 
 ---> AJAX 
 
a.  XmlHttpRequest object 	---	callbacks	
		The XMLHttpRequest object can be used to request data from a web server.
		
b.  fetch()	api  		---  promises based

		--->  React JS uses this technique
		--->  axios package build on top of promises concept. 
		
c.   RxJS  	---   3rd party library --		observables 



Note:  By default angular cli installs RxJS library while creating new angular project. 

-----------------------------------------------------------------------------------------------


HttpClient Service in Angular 	---		HttpClientModule

HttpClient  class built using RxJS Observables. 

		httpClient.get("url").subscribe();
		
------------------------------------------------------------------------------------------------------------

Working with Observables ans Subscribing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Steps:
1.   Create Observable
2.   Observer/Subscriber :		Subscribe the Observable	



1.   Create Observable
~~~~~~~~~~~~~~~~~~~~

import {Observable}  from 'rxjs';

   let observableObj:Observable<string> = new Observable( (subscriber) => {
        subscriber.next("Data generated by observable -- 1");  
    });
	
  let observableObj:Observable<any> = new Observable( (subscriber) => {
        subscriber.next("Data generated by observable -- 1");  
    });

2.   Observer/Subscriber :		Subscribe the Observable	
	
		observableObj.subscribe(  (response) => {
			 console.log(response);
		}  );
		
-----------------------------------------------------------------

	
			
1.  Basic model of creating observable and subscribe
2.  How to emit multiple results from observable?	
3.  How to introduce time delay in observable?
4.  How to address different type of states in observables?

		
 
 
 
 
 Different type of states in observables
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1.  success response
 2.  error response
 3.  complete 
 
 
	  let observableObj = new Observable( (subscriber) => {				  
					subscriber.next("");		// success response
					subscriber.error("");	//error response
					subscriber.complete("");   // complete
		});
 
 
  
Subscriber
~~~~~~~~~~
 	--->  subscribe() method is used to handle the results that comes from observable.
	--->  this method expecting following parameters:

		a. success callback 			---		required
		b. error callback 					---		optional
		c. complete callback 			---		optional
		
		
		
	a.  	observableObj.subscribe(callback);
	
			 this.observableObj.subscribe(resData =>
			  {
				console.log(resData + " --- Line 30");
			  });
	
	b.   observableObj.subscribe({		
				next :    callback,
				error :   callback,
				complete :   callback		
			});
 
       
		Note:  In Old versions, you can pass callback as coma separated. 
				observableObj.subscribe(callback, callback, callback);
 
 
 
 setTimeout() method from JavaScript
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 setTimeout(callback, interval);
 
setTimeout(
          () =>  {
            subscriber.next("Data generated by observable -- 3");           
          }, 3000);  // wait the process for 3 sec
        }); 
		
		
		 
 
 
 
 1. Example on subscribe and unsubscribe with start and stop buttons.
		-->  uses interval()  creation function
		-->  
		
2.   Operators :		take(),  map()

3.   
		

Operators in RxJS
~~~~~~~~~~~~~~~


-->  	RxJS operators used to transform the responses which comes from observable. 


		
